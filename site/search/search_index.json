{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"FastAPI SOLID Docs: Building Scalable Python Web Apps","text":"<p>Welcome to the documentation for Fast API SOLID, a project that demonstrates how to implement the SOLID principles using FastAPI, a modern, fast (high-performance), web framework for building APIs with Python.</p>"},{"location":"#introduction","title":"Introduction","text":"<p>This project provides a sample implementation of a web application that follows SOLID principles, with clean architecture and dependency injection. It serves as an example of how to build scalable and maintainable web applications using modern Python tools and best practices.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To get started with the project, you'll need to have the following requirements installed on your computer:</p> <ul> <li>Docker</li> <li>Docker Compose</li> <li>Pipenv</li> </ul> <p>You can find more detailed instructions in the requirements section of the README.</p>"},{"location":"#usage","title":"Usage","text":"<p>Once you have the requirements installed, you can clone the repository and run the project using the following steps:</p> <ol> <li>Navigate to the project directory.</li> <li>Run the command <code>pipenv install</code> to install the required Python dependencies.</li> <li>Run the command <code>docker-compose up -d</code> to build and run the Docker image.</li> <li>Open a web browser and navigate to <code>http://localhost:8000</code> to view the project's homepage.</li> </ol> <p>You can find more detailed instructions in the running the project section of the README.</p>"},{"location":"#documentation","title":"Documentation","text":"<p>You can find detailed documentation on how to use the API and other project features in the following sections:</p> <ul> <li>Using Environment Variables</li> <li>Database Migrations with Alembic</li> <li>API Documentation</li> <li>Testing</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>If you're interested in contributing to the project, please see the contributing section of the README for more information.</p>"},{"location":"#code-standardization","title":"Code Standardization","text":"<p>This project follows the guidelines of PEP 8 and uses the Black tool to maintain consistent code formatting. In addition, it is recommended to use the PyLint tool for static code analysis.</p> <p>You can find more information in the code standardization section of the README.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT license. Please see the LICENSE file for more information.</p>"},{"location":"entities/user_entity/","title":"User Entity","text":"<p>The User Entity defines a SQLAlchemy model that represents the users table in the database. It consists of several attributes such as id, name, email, password, created_at, and updated_at.</p>"},{"location":"entities/user_entity/#attributes","title":"Attributes","text":"<ul> <li><code>id</code> (int): Primary key column for the user.</li> <li><code>name</code> (str): Name of the user. Maximum length is 50 characters.</li> <li><code>email</code> (str): Email address of the user. Must be unique and maximum length is 255 characters.</li> <li><code>password</code> (str): The password of the user (stored as a hash).</li> <li><code>created_at</code> (datetime): The datetime when the user was created.</li> <li><code>updated_at</code> (datetime): The datetime when the user was last updated.</li> </ul> <p>The User Entity is an important part of the project as it represents the user's data and provides a structured way of accessing and manipulating user-related data in the application. The code example provided demonstrates how to define a User entity using SQLAlchemy and shows how to define the different attributes that make up the entity.</p>"},{"location":"entities/user_entity/#code-example","title":"Code Example","text":"<p>Here's an example of <code>User</code> entity:</p> <pre><code>from sqlalchemy import Column, DateTime, Integer, String, UniqueConstraint\nfrom sqlalchemy.sql import func\n\nfrom src.config.database import Base\n\n\nclass User(Base):\n\n    __tablename__ = \"users\"\n\n    id = Column(Integer, primary_key=True, index=True)\n    name = Column(String(50), index=True, nullable=False, info={\"max_length\": 50})\n    email = Column(String(255), unique=True, index=True, nullable=False, info={\"max_length\": 255})\n    password = Column(String, nullable=False)\n    created_at = Column(DateTime(timezone=True), server_default=func.now())\n    updated_at = Column(DateTime(timezone=True), onupdate=func.now())\n\n    __table_args__ = (UniqueConstraint(\"email\", name=\"uq_users_email\"),)\n</code></pre>"}]}